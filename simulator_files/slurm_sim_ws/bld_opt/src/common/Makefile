# Makefile.in generated by automake 1.13.4 from Makefile.am.
# src/common/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# Makefile for common library
# If you are linking to this lib and know you are not linking to
# anything else that will need variables here link to
# $(top_builddir)/src/common/libcommon.la
# if you are linking to a stand alone program that needs all symbols link to
# $(top_builddir)/src/common/libcommon.o with -ldl added
# This avoids having multiple symbols running around when there should
# only be 1 address per symbol.  If you link to the libcommon.la in
# a plugin you will get 2 addresses for one symbol which could lead to problems.


VPATH = ../../../slurm_simulator/src/common
am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/slurm
pkgincludedir = $(includedir)/slurm
pkglibdir = $(libdir)/slurm
pkglibexecdir = $(libexecdir)/slurm
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
target_triplet = x86_64-pc-linux-gnu
noinst_PROGRAMS = libcommon.o$(EXEEXT) libeio.o$(EXEEXT) \
	libspank.o$(EXEEXT)
am__append_1 = sim/sim_funcs.c sim/sim_funcs.h sim/sim_conf.c sim/sim_jobtraces.c sim/sim_events.c
subdir = src/common
DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am \
	$(top_srcdir)/auxdir/depcomp
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/auxdir/ax_check_zlib.m4 \
	$(top_srcdir)/auxdir/ax_gcc_builtin.m4 \
	$(top_srcdir)/auxdir/ax_lib_hdf5.m4 \
	$(top_srcdir)/auxdir/ax_pthread.m4 \
	$(top_srcdir)/auxdir/libtool.m4 \
	$(top_srcdir)/auxdir/ltoptions.m4 \
	$(top_srcdir)/auxdir/ltsugar.m4 \
	$(top_srcdir)/auxdir/ltversion.m4 \
	$(top_srcdir)/auxdir/lt~obsolete.m4 \
	$(top_srcdir)/auxdir/slurm.m4 \
	$(top_srcdir)/auxdir/x_ac__system_configuration.m4 \
	$(top_srcdir)/auxdir/x_ac_affinity.m4 \
	$(top_srcdir)/auxdir/x_ac_blcr.m4 \
	$(top_srcdir)/auxdir/x_ac_bluegene.m4 \
	$(top_srcdir)/auxdir/x_ac_cray.m4 \
	$(top_srcdir)/auxdir/x_ac_curl.m4 \
	$(top_srcdir)/auxdir/x_ac_databases.m4 \
	$(top_srcdir)/auxdir/x_ac_debug.m4 \
	$(top_srcdir)/auxdir/x_ac_dlfcn.m4 \
	$(top_srcdir)/auxdir/x_ac_env.m4 \
	$(top_srcdir)/auxdir/x_ac_freeipmi.m4 \
	$(top_srcdir)/auxdir/x_ac_gpl_licensed.m4 \
	$(top_srcdir)/auxdir/x_ac_hwloc.m4 \
	$(top_srcdir)/auxdir/x_ac_iso.m4 \
	$(top_srcdir)/auxdir/x_ac_json.m4 \
	$(top_srcdir)/auxdir/x_ac_lua.m4 \
	$(top_srcdir)/auxdir/x_ac_lz4.m4 \
	$(top_srcdir)/auxdir/x_ac_man2html.m4 \
	$(top_srcdir)/auxdir/x_ac_munge.m4 \
	$(top_srcdir)/auxdir/x_ac_ncurses.m4 \
	$(top_srcdir)/auxdir/x_ac_netloc.m4 \
	$(top_srcdir)/auxdir/x_ac_nrt.m4 \
	$(top_srcdir)/auxdir/x_ac_ofed.m4 \
	$(top_srcdir)/auxdir/x_ac_pam.m4 \
	$(top_srcdir)/auxdir/x_ac_pmix.m4 \
	$(top_srcdir)/auxdir/x_ac_printf_null.m4 \
	$(top_srcdir)/auxdir/x_ac_ptrace.m4 \
	$(top_srcdir)/auxdir/x_ac_readline.m4 \
	$(top_srcdir)/auxdir/x_ac_rrdtool.m4 \
	$(top_srcdir)/auxdir/x_ac_setproctitle.m4 \
	$(top_srcdir)/auxdir/x_ac_sgi_job.m4 \
	$(top_srcdir)/auxdir/x_ac_simulator.m4 \
	$(top_srcdir)/auxdir/x_ac_slurm_ssl.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h $(top_builddir)/slurm/slurm.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)
am__DEPENDENCIES_1 =
libcommon_la_DEPENDENCIES = $(am__DEPENDENCIES_1)
am__libcommon_la_SOURCES_DIST = assoc_mgr.c assoc_mgr.h \
	cpu_frequency.c cpu_frequency.h node_features.c \
	node_features.h xmalloc.c xmalloc.h xassert.c xassert.h \
	xstring.c xstring.h xsignal.c xsignal.h strnatcmp.c \
	strnatcmp.h forward.c forward.h msg_aggr.c msg_aggr.h \
	strlcpy.c strlcpy.h list.c list.h xtree.c xtree.h xhash.c \
	xhash.h net.c net.h log.c log.h cbuf.c cbuf.h safeopen.c \
	safeopen.h bitstring.c bitstring.h mpi.c slurm_mpi.h pack.c \
	pack.h parse_config.c parse_config.h parse_value.c \
	parse_value.h plugin.c plugin.h plugrack.c plugrack.h power.c \
	power.h print_fields.c print_fields.h read_config.c \
	read_config.h node_select.c node_select.h env.c env.h fd.c \
	fd.h slurm_cred.h slurm_cred.c slurm_errno.c \
	slurm_ext_sensors.c slurm_ext_sensors.h slurm_mcs.c \
	slurm_mcs.h slurm_priority.c slurm_priority.h \
	slurm_protocol_api.c slurm_protocol_api.h \
	slurm_protocol_pack.c slurm_protocol_pack.h \
	slurm_protocol_util.c slurm_protocol_util.h \
	slurm_protocol_socket_implementation.c \
	slurm_protocol_socket_common.h slurm_protocol_common.h \
	slurm_protocol_interface.h slurm_protocol_defs.c \
	slurm_protocol_defs.h slurm_rlimits_info.h \
	slurm_rlimits_info.c slurmdb_defs.c slurmdb_defs.h \
	slurmdb_pack.c slurmdb_pack.h slurmdbd_defs.c slurmdbd_defs.h \
	working_cluster.c working_cluster.h uid.c uid.h util-net.c \
	util-net.h slurm_auth.c slurm_auth.h slurm_acct_gather.c \
	slurm_acct_gather.h slurm_accounting_storage.c \
	slurm_accounting_storage.h slurm_jobacct_gather.c \
	slurm_jobacct_gather.h slurm_acct_gather_energy.c \
	slurm_acct_gather_energy.h slurm_acct_gather_profile.c \
	slurm_acct_gather_profile.h slurm_acct_gather_infiniband.c \
	slurm_acct_gather_infiniband.h slurm_acct_gather_filesystem.c \
	slurm_acct_gather_filesystem.h slurm_jobcomp.c slurm_jobcomp.h \
	slurm_route.c slurm_route.h slurm_time.c slurm_time.h \
	slurm_topology.c slurm_topology.h switch.c switch.h macros.h \
	slurm_selecttype_info.c slurm_selecttype_info.h \
	slurm_resource_info.c slurm_resource_info.h hostlist.c \
	hostlist.h slurm_step_layout.c slurm_step_layout.h \
	checkpoint.c checkpoint.h job_resources.c job_resources.h \
	parse_time.c parse_time.h job_options.c job_options.h \
	global_defaults.c timers.c timers.h slurm_xlator.h stepd_api.c \
	stepd_api.h write_labelled_message.c write_labelled_message.h \
	proc_args.c proc_args.h node_conf.h node_conf.c gres.h gres.c \
	entity.h entity.c layout.h layout.c layouts_mgr.h \
	layouts_mgr.c mapping.c mapping.h xcgroup_read_config.c \
	xcgroup_read_config.h xlua.c xlua.h callerid.c callerid.h \
	slurm_persist_conn.c slurm_persist_conn.h sim/sim_funcs.c \
	sim/sim_funcs.h sim/sim_conf.c sim/sim_jobtraces.c \
	sim/sim_events.c
am__objects_1 = sim_funcs.lo sim_conf.lo \
	sim_jobtraces.lo sim_events.lo
am_libcommon_la_OBJECTS = assoc_mgr.lo cpu_frequency.lo \
	node_features.lo xmalloc.lo xassert.lo xstring.lo xsignal.lo \
	strnatcmp.lo forward.lo msg_aggr.lo strlcpy.lo list.lo \
	xtree.lo xhash.lo net.lo log.lo cbuf.lo safeopen.lo \
	bitstring.lo mpi.lo pack.lo parse_config.lo parse_value.lo \
	plugin.lo plugrack.lo power.lo print_fields.lo read_config.lo \
	node_select.lo env.lo fd.lo slurm_cred.lo slurm_errno.lo \
	slurm_ext_sensors.lo slurm_mcs.lo slurm_priority.lo \
	slurm_protocol_api.lo slurm_protocol_pack.lo \
	slurm_protocol_util.lo slurm_protocol_socket_implementation.lo \
	slurm_protocol_defs.lo slurm_rlimits_info.lo slurmdb_defs.lo \
	slurmdb_pack.lo slurmdbd_defs.lo working_cluster.lo uid.lo \
	util-net.lo slurm_auth.lo slurm_acct_gather.lo \
	slurm_accounting_storage.lo slurm_jobacct_gather.lo \
	slurm_acct_gather_energy.lo slurm_acct_gather_profile.lo \
	slurm_acct_gather_infiniband.lo \
	slurm_acct_gather_filesystem.lo slurm_jobcomp.lo \
	slurm_route.lo slurm_time.lo slurm_topology.lo switch.lo \
	slurm_selecttype_info.lo slurm_resource_info.lo hostlist.lo \
	slurm_step_layout.lo checkpoint.lo job_resources.lo \
	parse_time.lo job_options.lo global_defaults.lo timers.lo \
	stepd_api.lo write_labelled_message.lo proc_args.lo \
	node_conf.lo gres.lo entity.lo layout.lo layouts_mgr.lo \
	mapping.lo xcgroup_read_config.lo xlua.lo callerid.lo \
	slurm_persist_conn.lo $(am__objects_1)
libcommon_la_OBJECTS = $(am_libcommon_la_OBJECTS)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
libcommon_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(libcommon_la_LDFLAGS) $(LDFLAGS) -o $@
libdaemonize_la_LIBADD =
am_libdaemonize_la_OBJECTS = daemonize.lo
libdaemonize_la_OBJECTS = $(am_libdaemonize_la_OBJECTS)
libeio_la_LIBADD =
am_libeio_la_OBJECTS = eio.lo io_hdr.lo
libeio_la_OBJECTS = $(am_libeio_la_OBJECTS)
libspank_la_LIBADD =
am_libspank_la_OBJECTS = plugstack.lo optz.lo
libspank_la_OBJECTS = $(am_libspank_la_OBJECTS)
PROGRAMS = $(noinst_PROGRAMS)
am_libcommon_o_OBJECTS =
libcommon_o_OBJECTS = $(am_libcommon_o_OBJECTS)
libcommon_o_LDADD = $(LDADD)
am_libeio_o_OBJECTS =
libeio_o_OBJECTS = $(am_libeio_o_OBJECTS)
libeio_o_LDADD = $(LDADD)
am_libspank_o_OBJECTS =
libspank_o_OBJECTS = $(am_libspank_o_OBJECTS)
libspank_o_LDADD = $(LDADD)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir) -I$(top_builddir)/slurm
depcomp = $(SHELL) $(top_srcdir)/auxdir/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(libcommon_la_SOURCES) $(EXTRA_libcommon_la_SOURCES) \
	$(libdaemonize_la_SOURCES) $(libeio_la_SOURCES) \
	$(libspank_la_SOURCES) $(libcommon_o_SOURCES) \
	$(libeio_o_SOURCES) $(libspank_o_SOURCES)
DIST_SOURCES = $(am__libcommon_la_SOURCES_DIST) \
	$(EXTRA_libcommon_la_SOURCES) $(libdaemonize_la_SOURCES) \
	$(libeio_la_SOURCES) $(libspank_la_SOURCES) \
	$(libcommon_o_SOURCES) $(libeio_o_SOURCES) \
	$(libspank_o_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/slurm/slurm_sim_ws/slurm_simulator/auxdir/missing aclocal-1.13
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AR = ar
AUTOCONF = ${SHELL} /home/slurm/slurm_sim_ws/slurm_simulator/auxdir/missing autoconf
AUTOHEADER = ${SHELL} /home/slurm/slurm_sim_ws/slurm_simulator/auxdir/missing autoheader
AUTOMAKE = ${SHELL} /home/slurm/slurm_sim_ws/slurm_simulator/auxdir/missing automake-1.13
AWK = gawk
BGQ_LOADED = 
BG_INCLUDES = 
BG_LDFLAGS = 
BLCR_CPPFLAGS = 
BLCR_HOME = 
BLCR_LDFLAGS = 
BLCR_LIBS = 
BLUEGENE_LOADED = 
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O3 -D NDEBUG=1 -pthread -DSLURM_SIMULATOR
CHECK_CFLAGS = 
CHECK_LIBS = 
CPP = gcc -E
CPPFLAGS = 
CRAY_JOB_CPPFLAGS = 
CRAY_JOB_LDFLAGS = 
CRAY_SELECT_CPPFLAGS = 
CRAY_SELECT_LDFLAGS = 
CRAY_SWITCH_CPPFLAGS = 
CRAY_SWITCH_LDFLAGS = 
CRAY_TASK_CPPFLAGS = 
CRAY_TASK_LDFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -DSLURM_SIMULATOR
CYGPATH_W = echo
DATAWARP_CPPFLAGS = 
DATAWARP_LDFLAGS = 
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DL_LIBS = -ldl
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
# This is needed if compiling on windows
EXEEXT = 
FGREP = /bin/grep -F
FREEIPMI_CPPFLAGS = 
FREEIPMI_LDFLAGS = 
FREEIPMI_LIBS = 
GLIB_CFLAGS = 
GLIB_COMPILE_RESOURCES = 
GLIB_GENMARSHAL = 
GLIB_LIBS = 
GLIB_MKENUMS = 
GOBJECT_QUERY = 
GREP = /bin/grep
GTK_CFLAGS = 
GTK_LIBS = 
H5CC = 
H5FC = 
HAVEMYSQLCONFIG = /usr/bin//mysql_config
HAVE_MAN2HTML = 
HAVE_NRT = 
HAVE_OPENSSL = 
HAVE_SOME_CURSES = 
HDF5_CC = 
HDF5_CFLAGS = 
HDF5_CPPFLAGS = 
HDF5_FC = 
HDF5_FFLAGS = 
HDF5_FLIBS = 
HDF5_LDFLAGS = 
HDF5_LIBS = 
HDF5_TYPE = neither
HDF5_VERSION = 
HWLOC_CPPFLAGS = 
HWLOC_LDFLAGS = 
HWLOC_LIBS = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
JSON_CPPFLAGS = 
JSON_LDFLAGS = 
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS =  
LIBCURL = 
LIBCURL_CPPFLAGS = 
LIBOBJS = 
LIBS =   -lrt -lm
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
LZ4_CPPFLAGS = 
LZ4_LDFLAGS = 
LZ4_LIBS = 
MAINT = #
MAKEINFO = ${SHELL} /home/slurm/slurm_sim_ws/slurm_simulator/auxdir/missing makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
MUNGE_CPPFLAGS = 
MUNGE_DIR = 
MUNGE_LDFLAGS = 
MUNGE_LIBS = 
MYSQL_CFLAGS = -I/usr/include/mysql
MYSQL_LIBS = -L/usr/lib/x86_64-linux-gnu -lmysqlclient -lpthread -lz -lm -lrt -latomic -lssl -lcrypto -ldl
NCURSES = 
NETLOC_CPPFLAGS = 
NETLOC_LDFLAGS = 
NETLOC_LIBS = 
NM = /usr/bin/nm -B
NMEDIT = 
NRT_CPPFLAGS = 
NUMA_LIBS = 
OBJDUMP = objdump
OBJEXT = o
OFED_CPPFLAGS = 
OFED_LDFLAGS = 
OFED_LIBS = 
OTOOL = 
OTOOL64 = 
PACKAGE = slurm
PACKAGE_BUGREPORT = slurm-dev@schedmd.com
PACKAGE_NAME = slurm
PACKAGE_STRING = slurm 17.02
PACKAGE_TARNAME = slurm
PACKAGE_URL = https://slurm.schedmd.com
PACKAGE_VERSION = 17.02
PAM_DIR = /lib/security
PAM_LIBS = 
PATH_SEPARATOR = :
PKG_CONFIG = no
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
PMIX_LIBS = -lpmix
PMIX_V1_CPPFLAGS = 
PMIX_V1_LDFLAGS = 
PMIX_V2_CPPFLAGS = 
PMIX_V2_LDFLAGS = 
PROJECT = slurm
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_LIBS = 
RANLIB = ranlib
READLINE_LIBS = 
REAL_BGQ_LOADED = 
RELEASE = 1
RRDTOOL_CPPFLAGS = 
RRDTOOL_LDFLAGS = 
RRDTOOL_LIBS = 
RUNJOB_LDFLAGS = 
SED = /bin/sed
SEMAPHORE_LIBS = 
SEMAPHORE_SOURCES = semaphore.c
SET_MAKE = 
SHELL = /bin/bash
SLEEP_CMD = /bin/sleep
SLURMCTLD_PORT = 
SLURMCTLD_PORT_COUNT = 
SLURMDBD_PORT = 
SLURMD_PORT = 
SLURM_API_AGE = 0
SLURM_API_CURRENT = 31
SLURM_API_MAJOR = 31
SLURM_API_REVISION = 0
SLURM_API_VERSION = 0x1f0000
SLURM_MAJOR = 17
SLURM_MICRO = 2
SLURM_MINOR = 02
SLURM_PREFIX = 
SLURM_VERSION_NUMBER = 0x110202
SLURM_VERSION_STRING = 17.02.2
SO_LDFLAGS = 
SSL_CPPFLAGS = 
SSL_LDFLAGS = 
SSL_LIBS = -lcrypto
STRIP = strip
SUCMD = /bin/su
UTIL_LIBS = -lutil
VERSION = 17.02
ZLIB_CPPFLAGS = -I/usr/include
ZLIB_LDFLAGS = -L/usr/lib
ZLIB_LIBS = -lz
_libcurl_config = 
abs_builddir = /home/slurm/slurm_sim_ws/bld_opt/src/common
abs_srcdir = /home/slurm/slurm_sim_ws/bld_opt/../slurm_simulator/src/common
abs_top_builddir = /home/slurm/slurm_sim_ws/bld_opt
abs_top_srcdir = /home/slurm/slurm_sim_ws/bld_opt/../slurm_simulator
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
ac_have_man2html = no
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
ax_pthread_config = 
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/slurm/slurm_sim_ws/slurm_simulator/auxdir/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lua_CFLAGS = 
lua_LIBS = 
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /home/slurm/slurm_sim_ws/slurm_opt
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = ../../../slurm_simulator/src/common
sysconfdir = ${prefix}/etc
target = x86_64-pc-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = pc
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../../../slurm_simulator
AUTOMAKE_OPTIONS = foreign
AM_CPPFLAGS = -I$(top_srcdir) $(BG_INCLUDES)
noinst_LTLIBRARIES = \
	libcommon.la 			\
	libdaemonize.la 		\
	libeio.la  			\
	libspank.la

libcommon_la_SOURCES = assoc_mgr.c assoc_mgr.h cpu_frequency.c \
	cpu_frequency.h node_features.c node_features.h xmalloc.c \
	xmalloc.h xassert.c xassert.h xstring.c xstring.h xsignal.c \
	xsignal.h strnatcmp.c strnatcmp.h forward.c forward.h \
	msg_aggr.c msg_aggr.h strlcpy.c strlcpy.h list.c list.h \
	xtree.c xtree.h xhash.c xhash.h net.c net.h log.c log.h cbuf.c \
	cbuf.h safeopen.c safeopen.h bitstring.c bitstring.h mpi.c \
	slurm_mpi.h pack.c pack.h parse_config.c parse_config.h \
	parse_value.c parse_value.h plugin.c plugin.h plugrack.c \
	plugrack.h power.c power.h print_fields.c print_fields.h \
	read_config.c read_config.h node_select.c node_select.h env.c \
	env.h fd.c fd.h slurm_cred.h slurm_cred.c slurm_errno.c \
	slurm_ext_sensors.c slurm_ext_sensors.h slurm_mcs.c \
	slurm_mcs.h slurm_priority.c slurm_priority.h \
	slurm_protocol_api.c slurm_protocol_api.h \
	slurm_protocol_pack.c slurm_protocol_pack.h \
	slurm_protocol_util.c slurm_protocol_util.h \
	slurm_protocol_socket_implementation.c \
	slurm_protocol_socket_common.h slurm_protocol_common.h \
	slurm_protocol_interface.h slurm_protocol_defs.c \
	slurm_protocol_defs.h slurm_rlimits_info.h \
	slurm_rlimits_info.c slurmdb_defs.c slurmdb_defs.h \
	slurmdb_pack.c slurmdb_pack.h slurmdbd_defs.c slurmdbd_defs.h \
	working_cluster.c working_cluster.h uid.c uid.h util-net.c \
	util-net.h slurm_auth.c slurm_auth.h slurm_acct_gather.c \
	slurm_acct_gather.h slurm_accounting_storage.c \
	slurm_accounting_storage.h slurm_jobacct_gather.c \
	slurm_jobacct_gather.h slurm_acct_gather_energy.c \
	slurm_acct_gather_energy.h slurm_acct_gather_profile.c \
	slurm_acct_gather_profile.h slurm_acct_gather_infiniband.c \
	slurm_acct_gather_infiniband.h slurm_acct_gather_filesystem.c \
	slurm_acct_gather_filesystem.h slurm_jobcomp.c slurm_jobcomp.h \
	slurm_route.c slurm_route.h slurm_time.c slurm_time.h \
	slurm_topology.c slurm_topology.h switch.c switch.h macros.h \
	slurm_selecttype_info.c slurm_selecttype_info.h \
	slurm_resource_info.c slurm_resource_info.h hostlist.c \
	hostlist.h slurm_step_layout.c slurm_step_layout.h \
	checkpoint.c checkpoint.h job_resources.c job_resources.h \
	parse_time.c parse_time.h job_options.c job_options.h \
	global_defaults.c timers.c timers.h slurm_xlator.h stepd_api.c \
	stepd_api.h write_labelled_message.c write_labelled_message.h \
	proc_args.c proc_args.h node_conf.h node_conf.c gres.h gres.c \
	entity.h entity.c layout.h layout.c layouts_mgr.h \
	layouts_mgr.c mapping.c mapping.h xcgroup_read_config.c \
	xcgroup_read_config.h xlua.c xlua.h callerid.c callerid.h \
	slurm_persist_conn.c slurm_persist_conn.h $(am__append_1)
EXTRA_libcommon_la_SOURCES = \
	uthash/LICENSE			\
	uthash/README			\
	uthash/uthash.h

libdaemonize_la_SOURCES = \
	daemonize.c       	 	\
	daemonize.h

libeio_la_SOURCES = \
	eio.c eio.h	   		\
	io_hdr.c io_hdr.h

libspank_la_SOURCES = \
	plugstack.c plugstack.h \
	optz.c      optz.h

libcommon_la_LIBADD = $(DL_LIBS)
libcommon_la_LDFLAGS = $(LIB_LDFLAGS) -module --export-dynamic

# This was made so we could export all symbols from libcommon
# on multiple platforms
libcommon_o_SOURCES = 

# This was made so we could export all symbols from libeio
# on multiple platforms
libeio_o_SOURCES = 

# This was made so we could export all symbols from libspank
# on multiple platforms
libspank_o_SOURCES = 
all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/common/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/common/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; \
	locs=`for p in $$list; do echo $$p; done | \
	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
	      sort -u`; \
	test -z "$$locs" || { \
	  echo rm -f $${locs}; \
	  rm -f $${locs}; \
	}

libcommon.la: $(libcommon_la_OBJECTS) $(libcommon_la_DEPENDENCIES) $(EXTRA_libcommon_la_DEPENDENCIES) 
	$(AM_V_CCLD)$(libcommon_la_LINK)  $(libcommon_la_OBJECTS) $(libcommon_la_LIBADD) $(LIBS)

libdaemonize.la: $(libdaemonize_la_OBJECTS) $(libdaemonize_la_DEPENDENCIES) $(EXTRA_libdaemonize_la_DEPENDENCIES) 
	$(AM_V_CCLD)$(LINK)  $(libdaemonize_la_OBJECTS) $(libdaemonize_la_LIBADD) $(LIBS)

libeio.la: $(libeio_la_OBJECTS) $(libeio_la_DEPENDENCIES) $(EXTRA_libeio_la_DEPENDENCIES) 
	$(AM_V_CCLD)$(LINK)  $(libeio_la_OBJECTS) $(libeio_la_LIBADD) $(LIBS)

libspank.la: $(libspank_la_OBJECTS) $(libspank_la_DEPENDENCIES) $(EXTRA_libspank_la_DEPENDENCIES) 
	$(AM_V_CCLD)$(LINK)  $(libspank_la_OBJECTS) $(libspank_la_LIBADD) $(LIBS)

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/assoc_mgr.Plo
include ./$(DEPDIR)/bitstring.Plo
include ./$(DEPDIR)/callerid.Plo
include ./$(DEPDIR)/cbuf.Plo
include ./$(DEPDIR)/checkpoint.Plo
include ./$(DEPDIR)/cpu_frequency.Plo
include ./$(DEPDIR)/daemonize.Plo
include ./$(DEPDIR)/eio.Plo
include ./$(DEPDIR)/entity.Plo
include ./$(DEPDIR)/env.Plo
include ./$(DEPDIR)/fd.Plo
include ./$(DEPDIR)/forward.Plo
include ./$(DEPDIR)/global_defaults.Plo
include ./$(DEPDIR)/gres.Plo
include ./$(DEPDIR)/hostlist.Plo
include ./$(DEPDIR)/io_hdr.Plo
include ./$(DEPDIR)/job_options.Plo
include ./$(DEPDIR)/job_resources.Plo
include ./$(DEPDIR)/layout.Plo
include ./$(DEPDIR)/layouts_mgr.Plo
include ./$(DEPDIR)/list.Plo
include ./$(DEPDIR)/log.Plo
include ./$(DEPDIR)/mapping.Plo
include ./$(DEPDIR)/mpi.Plo
include ./$(DEPDIR)/msg_aggr.Plo
include ./$(DEPDIR)/net.Plo
include ./$(DEPDIR)/node_conf.Plo
include ./$(DEPDIR)/node_features.Plo
include ./$(DEPDIR)/node_select.Plo
include ./$(DEPDIR)/optz.Plo
include ./$(DEPDIR)/pack.Plo
include ./$(DEPDIR)/parse_config.Plo
include ./$(DEPDIR)/parse_time.Plo
include ./$(DEPDIR)/parse_value.Plo
include ./$(DEPDIR)/plugin.Plo
include ./$(DEPDIR)/plugrack.Plo
include ./$(DEPDIR)/plugstack.Plo
include ./$(DEPDIR)/power.Plo
include ./$(DEPDIR)/print_fields.Plo
include ./$(DEPDIR)/proc_args.Plo
include ./$(DEPDIR)/read_config.Plo
include ./$(DEPDIR)/safeopen.Plo
include ./$(DEPDIR)/sim_conf.Plo
include ./$(DEPDIR)/sim_events.Plo
include ./$(DEPDIR)/sim_funcs.Plo
include ./$(DEPDIR)/sim_jobtraces.Plo
include ./$(DEPDIR)/slurm_accounting_storage.Plo
include ./$(DEPDIR)/slurm_acct_gather.Plo
include ./$(DEPDIR)/slurm_acct_gather_energy.Plo
include ./$(DEPDIR)/slurm_acct_gather_filesystem.Plo
include ./$(DEPDIR)/slurm_acct_gather_infiniband.Plo
include ./$(DEPDIR)/slurm_acct_gather_profile.Plo
include ./$(DEPDIR)/slurm_auth.Plo
include ./$(DEPDIR)/slurm_cred.Plo
include ./$(DEPDIR)/slurm_errno.Plo
include ./$(DEPDIR)/slurm_ext_sensors.Plo
include ./$(DEPDIR)/slurm_jobacct_gather.Plo
include ./$(DEPDIR)/slurm_jobcomp.Plo
include ./$(DEPDIR)/slurm_mcs.Plo
include ./$(DEPDIR)/slurm_persist_conn.Plo
include ./$(DEPDIR)/slurm_priority.Plo
include ./$(DEPDIR)/slurm_protocol_api.Plo
include ./$(DEPDIR)/slurm_protocol_defs.Plo
include ./$(DEPDIR)/slurm_protocol_pack.Plo
include ./$(DEPDIR)/slurm_protocol_socket_implementation.Plo
include ./$(DEPDIR)/slurm_protocol_util.Plo
include ./$(DEPDIR)/slurm_resource_info.Plo
include ./$(DEPDIR)/slurm_rlimits_info.Plo
include ./$(DEPDIR)/slurm_route.Plo
include ./$(DEPDIR)/slurm_selecttype_info.Plo
include ./$(DEPDIR)/slurm_step_layout.Plo
include ./$(DEPDIR)/slurm_time.Plo
include ./$(DEPDIR)/slurm_topology.Plo
include ./$(DEPDIR)/slurmdb_defs.Plo
include ./$(DEPDIR)/slurmdb_pack.Plo
include ./$(DEPDIR)/slurmdbd_defs.Plo
include ./$(DEPDIR)/stepd_api.Plo
include ./$(DEPDIR)/strlcpy.Plo
include ./$(DEPDIR)/strnatcmp.Plo
include ./$(DEPDIR)/switch.Plo
include ./$(DEPDIR)/timers.Plo
include ./$(DEPDIR)/uid.Plo
include ./$(DEPDIR)/util-net.Plo
include ./$(DEPDIR)/working_cluster.Plo
include ./$(DEPDIR)/write_labelled_message.Plo
include ./$(DEPDIR)/xassert.Plo
include ./$(DEPDIR)/xcgroup_read_config.Plo
include ./$(DEPDIR)/xhash.Plo
include ./$(DEPDIR)/xlua.Plo
include ./$(DEPDIR)/xmalloc.Plo
include ./$(DEPDIR)/xsignal.Plo
include ./$(DEPDIR)/xstring.Plo
include ./$(DEPDIR)/xtree.Plo

.c.o:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c $<

.c.obj:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CC)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LTCOMPILE) -c -o $@ $<

sim_funcs.lo: sim/sim_funcs.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT sim_funcs.lo -MD -MP -MF $(DEPDIR)/sim_funcs.Tpo -c -o sim_funcs.lo `test -f 'sim/sim_funcs.c' || echo '$(srcdir)/'`sim/sim_funcs.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/sim_funcs.Tpo $(DEPDIR)/sim_funcs.Plo
#	$(AM_V_CC)source='sim/sim_funcs.c' object='sim_funcs.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o sim_funcs.lo `test -f 'sim/sim_funcs.c' || echo '$(srcdir)/'`sim/sim_funcs.c

sim_conf.lo: sim/sim_conf.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT sim_conf.lo -MD -MP -MF $(DEPDIR)/sim_conf.Tpo -c -o sim_conf.lo `test -f 'sim/sim_conf.c' || echo '$(srcdir)/'`sim/sim_conf.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/sim_conf.Tpo $(DEPDIR)/sim_conf.Plo
#	$(AM_V_CC)source='sim/sim_conf.c' object='sim_conf.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o sim_conf.lo `test -f 'sim/sim_conf.c' || echo '$(srcdir)/'`sim/sim_conf.c

sim_jobtraces.lo: sim/sim_jobtraces.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT sim_jobtraces.lo -MD -MP -MF $(DEPDIR)/sim_jobtraces.Tpo -c -o sim_jobtraces.lo `test -f 'sim/sim_jobtraces.c' || echo '$(srcdir)/'`sim/sim_jobtraces.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/sim_jobtraces.Tpo $(DEPDIR)/sim_jobtraces.Plo
#	$(AM_V_CC)source='sim/sim_jobtraces.c' object='sim_jobtraces.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o sim_jobtraces.lo `test -f 'sim/sim_jobtraces.c' || echo '$(srcdir)/'`sim/sim_jobtraces.c

sim_events.lo: sim/sim_events.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT sim_events.lo -MD -MP -MF $(DEPDIR)/sim_events.Tpo -c -o sim_events.lo `test -f 'sim/sim_events.c' || echo '$(srcdir)/'`sim/sim_events.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/sim_events.Tpo $(DEPDIR)/sim_events.Plo
#	$(AM_V_CC)source='sim/sim_events.c' object='sim_events.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o sim_events.lo `test -f 'sim/sim_events.c' || echo '$(srcdir)/'`sim/sim_events.c

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
	clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES clean-noinstPROGRAMS \
	cscopelist-am ctags ctags-am distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am

libcommon.o$(EXEEXT) :  $(libcommon_la_OBJECTS) $(libcommon_la_DEPENDENCIES)
	$(LINK)  $(libcommon_la_OBJECTS)
libeio.o$(EXEEXT) :  $(libeio_la_OBJECTS) $(libeio_la_DEPENDENCIES)
	$(LINK)  $(libeio_la_OBJECTS)
libspank.o$(EXEEXT) :  $(libspank_la_OBJECTS) $(libspank_la_DEPENDENCIES)
	$(LINK)  $(libspank_la_OBJECTS)

global_defaults.c : $(top_builddir)/config.h Makefile
	@( echo "/* This file autogenerated by src/common/Makefile */"; \
	   echo	"char *default_plugin_path = \"$(pkglibdir)\";"; \
	   echo \
	   "char *default_slurm_config_file = \"$(sysconfdir)/slurm.conf\";"; \
	   echo "char *default_plugstack = \"$(sysconfdir)/plugstack.conf\";";\
	 ) > global_defaults.c

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
